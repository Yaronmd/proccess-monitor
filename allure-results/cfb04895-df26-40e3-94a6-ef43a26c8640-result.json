{"name": "test_invalid_process_names", "status": "broken", "statusDetails": {"message": "ValueError: Failed to find any process for {'123'}", "trace": "def test_invalid_process_names():\n        \"\"\"Test how the Monitor class handles non-existing or invalid process names.\"\"\"\n>       monitor = Monitor(process_names=[\"123\"], interval=1)\n\ntests/test_monitor.py:52: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nmonitor/monitor.py:22: in __init__\n    self.monitored_processes = self.get_initial_processes()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <monitor.monitor.Monitor object at 0x106d168b0>\n\n    def get_initial_processes(self) -> list:\n        \"\"\"Fetch all running processes and filter the required ones.\"\"\"\n        monitored = []\n        for proc in psutil.process_iter(attrs=[\"name\"]):\n            try:\n                if proc.info[\"name\"] in self.process_names:\n                    monitored.append(proc)\n            except (psutil.NoSuchProcess, psutil.AccessDenied):\n                continue\n        if not monitored:\n>           raise ValueError(f\"Failed to find any process for {self.process_names}\")\nE           ValueError: Failed to find any process for {'123'}\n\nmonitor/monitor.py:35: ValueError"}, "description": "Test how the Monitor class handles non-existing or invalid process names.", "start": 1743107048488, "stop": 1743107048495, "uuid": "8fdeb02f-016a-4d92-9a85-de1f244bfec1", "historyId": "a8d28acdc6edd12cdc5d6286d67d5969", "testCaseId": "a8d28acdc6edd12cdc5d6286d67d5969", "fullName": "tests.test_monitor#test_invalid_process_names", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_monitor"}, {"name": "host", "value": "Mac.lan"}, {"name": "thread", "value": "44349-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_monitor"}]}